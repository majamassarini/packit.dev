"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[9016],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},91551:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={title:"Configuration",sidebar_position:7},o="Configuration",l={unversionedId:"configuration/index",id:"configuration/index",title:"Configuration",description:"Packit uses a configuration file in the upstream repository. The config file is written in YAML language.",source:"@site/docs/configuration/index.md",sourceDirName:"configuration",slug:"/configuration/",permalink:"/docs/configuration/",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/configuration/index.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Configuration",sidebar_position:7},sidebar:"autogenerated",previous:{title:"Packit Onboarding Guide",permalink:"/docs/guide"},next:{title:"Packit Service jobs configuration",permalink:"/docs/configuration/jobs"}},s={},p=[{value:"Top-level keys",id:"top-level-keys",level:2},{value:"packages",id:"packages",level:4},{value:"jobs",id:"jobs",level:4},{value:"Package-specific keys",id:"package-specific-keys",level:3},{value:"paths",id:"paths",level:4},{value:"specfile_path",id:"specfile_path",level:4},{value:"upstream_package_name",id:"upstream_package_name",level:4},{value:"upstream_project_url",id:"upstream_project_url",level:4},{value:"create_pr (only in CLI)",id:"create_pr-only-in-cli",level:4},{value:"merge_pr_in_ci",id:"merge_pr_in_ci",level:4},{value:"sync_changelog",id:"sync_changelog",level:4},{value:"update_release",id:"update_release",level:4},{value:"release_suffix",id:"release_suffix",level:4},{value:"files_to_sync",id:"files_to_sync",level:4},{value:"Examples:",id:"examples",level:5},{value:"create_sync_note",id:"create_sync_note",level:4},{value:"upstream_ref",id:"upstream_ref",level:4},{value:"downstream_package_name",id:"downstream_package_name",level:4},{value:"dist_git_namespace",id:"dist_git_namespace",level:4},{value:"dist_git_base_url",id:"dist_git_base_url",level:4},{value:"<del>create_tarball_command</del> (deprecated)",id:"create_tarball_command-deprecated",level:4},{value:"<del>current_version_command</del> (deprecated)",id:"current_version_command-deprecated",level:4},{value:"actions",id:"actions",level:4},{value:"allowed_gpg_keys",id:"allowed_gpg_keys",level:4},{value:"spec_source_id",id:"spec_source_id",level:4},{value:"upstream_tag_template",id:"upstream_tag_template",level:4},{value:"archive_root_dir_template",id:"archive_root_dir_template",level:4},{value:"patch_generation_ignore_paths",id:"patch_generation_ignore_paths",level:4},{value:"patch_generation_patch_id_digits",id:"patch_generation_patch_id_digits",level:4},{value:"notifications",id:"notifications",level:4},{value:"issue_repository",id:"issue_repository",level:4},{value:"copy_upstream_release_description",id:"copy_upstream_release_description",level:4},{value:"sources",id:"sources",level:4},{value:"srpm_build_deps",id:"srpm_build_deps",level:4},{value:"packit_instances",id:"packit_instances",level:4},{value:"upstream_tag_include",id:"upstream_tag_include",level:4},{value:"upstream_tag_exclude",id:"upstream_tag_exclude",level:4},{value:"Aliases",id:"aliases",level:2},{value:"User configuration file",id:"user-configuration-file",level:2},{value:"Values",id:"values",level:3},{value:"Authentication dictionary",id:"authentication-dictionary",level:4},{value:"Example",id:"example",level:5}],d={toc:p},c="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Packit uses a configuration file in the upstream repository. The config file is written in YAML language."),(0,i.kt)("p",null,"You should place the file in the root of your upstream repo. Packit accepts these names:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".packit.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".packit.yml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"packit.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"packit.yml"))),(0,i.kt)("p",null,"Both Packit Service and Packit CLI use this configuration file."),(0,i.kt)("h2",{id:"top-level-keys"},"Top-level keys"),(0,i.kt)("p",null,"Here you can see a list of options that can be defined at the top-level and\nshared by all of the jobs."),(0,i.kt)("h4",{id:"packages"},"packages"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"dict"),") This key was introduced mainly to enable support for monorepositories, upstream repositories\nmapping to multiple downstream packages. It holds a dictionary of ",(0,i.kt)("inlineCode",{parentName:"p"},"{<package_name>: <package_configuration>}")," where\npackage configuration consists of the keys introduced in ",(0,i.kt)("a",{parentName:"p",href:"#package-specific-keys"},"Package-specific keys section"),"\n(the only exception is the ",(0,i.kt)("a",{parentName:"p",href:"#upstream_project_url"},(0,i.kt)("inlineCode",{parentName:"a"},"upstream_project_url"))," which can be defined only on the top level)."),(0,i.kt)("p",null,"A configuration utilising the ",(0,i.kt)("inlineCode",{parentName:"p"},"packages")," key may look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"packages:\n\n  python-copr:\n    downstream_package_name: python-copr\n    upstream_package_name: copr\n    paths: \n      - ./python\n    specfile_path: python-copr.spec\n    files_to_sync: \n      - python-copr.spec\n\n  copr-cli:\n    downstream_package_name: copr-cli\n    upstream_package_name: copr-cli\n    paths: \n      - ./cli\n    specfile_path: copr-cli.spec\n    files_to_sync: \n      - copr-cli.spec\n")),(0,i.kt)("p",null,"If the configuration doesn't include the ",(0,i.kt)("inlineCode",{parentName:"p"},"packages")," key, it is expected that there is only one package\nand the package-specific options can be defined on the top level:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: python-copr\nupstream_package_name: copr\npaths: \n  - ./python\nspecfile_path: python-copr.spec\nfiles_to_sync: \n  - python-copr.spec\n")),(0,i.kt)("h4",{id:"jobs"},"jobs"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of dicts"),") A list of job definitions for Packit Service: see\n",(0,i.kt)("a",{parentName:"p",href:"configuration/jobs"},"Packit Service jobs configuration")," for details."),(0,i.kt)("h3",{id:"package-specific-keys"},"Package-specific keys"),(0,i.kt)("h4",{id:"paths"},"paths"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list"),") List of relative paths in the upstream repository, which should be considered for the particular package\n(used mainly for monorepositories). Defaults to the root of the repository (",(0,i.kt)("inlineCode",{parentName:"p"},'["./"]'),").\nThis is the only key that can appear only inside ",(0,i.kt)("a",{parentName:"p",href:"#packages"},(0,i.kt)("inlineCode",{parentName:"a"},"packages"))," dictionary values."),(0,i.kt)("h4",{id:"specfile_path"},"specfile_path"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Relative path to a spec file within the upstream repository.\nIf not specified, defaults to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"<downstream_package_name>.spec")," if ",(0,i.kt)("a",{parentName:"li",href:"#downstream_package_name"},(0,i.kt)("inlineCode",{parentName:"a"},"downstream_package_name")),"\nis set (",(0,i.kt)("inlineCode",{parentName:"li"},"<downstream_package_name>.spec")," in all the ",(0,i.kt)("inlineCode",{parentName:"li"},"paths")," when using ",(0,i.kt)("inlineCode",{parentName:"li"},"paths"),")."),(0,i.kt)("li",{parentName:"ol"},"(",(0,i.kt)("em",{parentName:"li"},"deprecated"),") Else recursively search the tree and use the first spec file found\n(Recursively search all the ",(0,i.kt)("inlineCode",{parentName:"li"},"paths")," of the package when using ",(0,i.kt)("inlineCode",{parentName:"li"},"paths"),").")),(0,i.kt)("p",null,"Both in 1. and 2., when ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," are defined, they are searched in the order in which they are defined in the configuration."),(0,i.kt)("p",null,"If there are only test jobs with ",(0,i.kt)("inlineCode",{parentName:"p"},"skip_build")," option defined (more about it ",(0,i.kt)("a",{parentName:"p",href:"configuration/upstream/tests"},"here"),"),\nspec file doesn't need to be present and its path doesn't need to be defined in the config."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The functionality to recursively search for a specfile is deprecated and it's\ngoing to be ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/packit/packit/issues/1799"},"removed")," in a\nfuture version (>0.64.0) of Packit. We recommend projects to explicitly set\n",(0,i.kt)("inlineCode",{parentName:"p"},"specfile_path")," or rely on the ",(0,i.kt)("inlineCode",{parentName:"p"},"<downstream_package_name>.spec")," default, by\nsetting ",(0,i.kt)("inlineCode",{parentName:"p"},"downstream_package_name"),".")),(0,i.kt)("h4",{id:"upstream_package_name"},"upstream_package_name"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Name of the upstream repository (e.g. in PyPI), defaults to the\nname of the GitHub repository; it's used when working with the upstream project,\nas a release archive name and as a directory name in that archive."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Previously known as ",(0,i.kt)("inlineCode",{parentName:"p"},"upstream_project_name"),", which has been deprecated since Packit\n0.7.0")),(0,i.kt)("h4",{id:"upstream_project_url"},"upstream_project_url"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") URL of the upstream git project (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"https://github.com/packit/packit"),")."),(0,i.kt)("h4",{id:"create_pr-only-in-cli"},"create_pr (only in CLI)"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") When doing a new update in Fedora dist-git, should packit create a\nnew pull request (defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") or push directly to dist-git (if set to\n",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"). This option can be used only locally in the CLI, but can be overriden\nvia ",(0,i.kt)("inlineCode",{parentName:"p"},"--pr/--no-pr")," option. Deployed Packit (on GitHub or GitLab) ignores this\nsetting, because Packit Team ",(0,i.kt)("strong",{parentName:"p"},"does not")," endorse automated release from created\nrelease to the Bodhi update ",(0,i.kt)("strong",{parentName:"p"},"without any quality assurance"),"."),(0,i.kt)("h4",{id:"merge_pr_in_ci"},"merge_pr_in_ci"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") When Packit clones your repository while creating RPMs from your pull\nrequests, it by default merges the pull request checkout into the main\nrepository branch to be sure the changes are up to date. You can disable this\nbehaviour by setting this field to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," which will make Packit to work with\nyour pull request git ref as it is."),(0,i.kt)("h4",{id:"sync_changelog"},"sync_changelog"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") When doing a new update in Fedora dist-git, the specfile changelog\nis synchronized when set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". By default (",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"), everything but the changelog\npart is synchronized. Use this only when your changelogs are in sync since this overwrites the changelog in the downstream."),(0,i.kt)("h4",{id:"update_release"},"update_release"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") Packit by default modifies Release in the spec file when\ncreating a SRPM. If you don't want this, you can prevent it with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"update_release: false\n")),(0,i.kt)("p",null,"This option only applies to SRPM creation and doesn't affect ",(0,i.kt)("a",{parentName:"p",href:"#propose_downstream"},(0,i.kt)("inlineCode",{parentName:"a"},"propose_downstream")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"#pull_from_upstream"},(0,i.kt)("inlineCode",{parentName:"a"},"pull_from_upstream"))," jobs."),(0,i.kt)("h4",{id:"release_suffix"},"release_suffix"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"templated string"),") String that can be used to override the default release suffix\ngenerated by Packit. The suffix will be expanded, and you can use following variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," - version from ",(0,i.kt)("inlineCode",{parentName:"li"},"git describe")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PACKIT_RPMSPEC_RELEASE")," - release from specfile"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_COMMIT")," - commit SHA from which the SRPM is built"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_BRANCH")," - branch from which the SRPM is built")),(0,i.kt)("p",null,"Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'release_suffix: "dev.{PACKIT_PROJECT_BRANCH}"\n')),(0,i.kt)("p",null,"When unset, default release suffix that is generated by Packit is following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{original_release_number}.{current_time}.{sanitized_current_branch}{git_desc_suffix}\n")),(0,i.kt)("p",null,"It is also possible to define ",(0,i.kt)("inlineCode",{parentName:"p"},"release_suffix")," at the top-level of your packit\nconfig. In that situation all jobs and SRPM, Copr, Koji and RPM build from CLI\nwill inherit the ",(0,i.kt)("inlineCode",{parentName:"p"},"release_suffix")," that you have set. We ",(0,i.kt)("strong",{parentName:"p"},"advise")," caution when\ndoing such thing, because inheriting the release suffix value by Copr or Koji\nbuild may easily cause confusion, break the ordering of the NVRs of the RPMs and\nalso may cause usage of RPMs ",(0,i.kt)("strong",{parentName:"p"},"that are not meant")," for production use. In such\nscenarios, please try to make sure RPMs built by Packit are easily\ndistinguishable from the RPMs meant for production use. To prevent the\ninheritance, you can define:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"release_suffix: null\n")),(0,i.kt)("p",null,"If you don't want the release to be modified at all, see ",(0,i.kt)("a",{parentName:"p",href:"#update_release"},"update_release"),"."),(0,i.kt)("p",null,"This option only applies to SRPM creation and doesn't affect ",(0,i.kt)("a",{parentName:"p",href:"#propose_downstream"},(0,i.kt)("inlineCode",{parentName:"a"},"propose_downstream")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"#pull_from_upstream"},(0,i.kt)("inlineCode",{parentName:"a"},"pull_from_upstream"))," jobs."),(0,i.kt)("h4",{id:"files_to_sync"},"files_to_sync"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of strings or dicts"),") A list of relative paths to files in the upstream\nrepo which are meant to be copied to dist-git during an update."),(0,i.kt)("p",null,"Spec file path and config file path are always included by ",(0,i.kt)("inlineCode",{parentName:"p"},"packit init"),"\nbut can be manually removed from the list."),(0,i.kt)("p",null,"Under the hood this will use ",(0,i.kt)("inlineCode",{parentName:"p"},"rsync --archive")," to synchronise the paths\nbetween the upstream and the dist-git repo."),(0,i.kt)("p",null,"The fields for a dictionary item in the list are the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"src"),": A single path or a list of paths in the upstream repo that should be synced to dist-git."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"dest"),": Path in the dist-git repo, where paths in ",(0,i.kt)("inlineCode",{parentName:"li"},"src")," should be synced to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"mkpath"),": Flag to indicate if missing path components in ",(0,i.kt)("inlineCode",{parentName:"li"},"dest")," should be created or not (default: false)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"delete"),": Flag to indicate if extra content from ",(0,i.kt)("inlineCode",{parentName:"li"},"dest")," should be deleted (default: false)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"filters"),": List of ",(0,i.kt)("a",{parentName:"li",href:"https://www.man7.org/linux/man-pages/man1/rsync.1.html#FILTER_RULES"},"rsync filter rules")," to be used during syncing. Note that the rules apply relative\nto the source and/or destination path (e.g. a ",(0,i.kt)("inlineCode",{parentName:"li"},"protect")," filter applies relative to ",(0,i.kt)("inlineCode",{parentName:"li"},"dest")," path)")),(0,i.kt)("h5",{id:"examples"},"Examples:"),(0,i.kt)("p",null,"Copy a file from root of the upstream repo to dist-git:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - packit.spec\n")),(0,i.kt)("p",null,"If you copy ",(0,i.kt)("inlineCode",{parentName:"p"},"packit.yaml")," downstream, you can then take advantage of\n",(0,i.kt)("inlineCode",{parentName:"p"},"sync-from-downstream")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - .packit.yaml\n")),(0,i.kt)("p",null,"Rename or change the path of the synced file in dist-git:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - src: packit.spec\n    dest: redhat/packit.spec\n")),(0,i.kt)("p",null,"Paths also support globs. Copy everything from ",(0,i.kt)("inlineCode",{parentName:"p"},"fedora-packaging")," folder and\nput it to the root of the dist-git repo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - src: fedora-packaging/*\n    dest: .\n")),(0,i.kt)("p",null,"Sync the entire content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"fedora-packaging")," directory, and delete extra\ncontent found in the root of the dist-git repo; protect ",(0,i.kt)("inlineCode",{parentName:"p"},".git*")," files and the\n",(0,i.kt)("inlineCode",{parentName:"p"},"sources")," file from deletion:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'files_to_sync:\n  - src: fedora-packaging/\n    dest: .\n    delete: true\n    filters:\n    - "protect .git*"\n    - "protect sources"\n')),(0,i.kt)("p",null,"Specify multiple source files to copy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - src:\n    - package.spec\n    - some-file\n    dest: .\n")),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"mkpath")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to create missing path components in dist-git.\nIn the example below, ",(0,i.kt)("inlineCode",{parentName:"p"},"subdir")," is created if missing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"files_to_sync:\n  - src: some.file\n    dest: subdir/some.file\n    mkpath: true\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This option is a successor to ",(0,i.kt)("inlineCode",{parentName:"p"},"synced_files")," that has been already deprecated.")),(0,i.kt)("h4",{id:"create_sync_note"},"create_sync_note"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") Create or update a ",(0,i.kt)("em",{parentName:"p"},"README.packit")," file in dist-git when doing a new update,\ntelling that the repository is maintained by Packit and marking the version of ",(0,i.kt)("inlineCode",{parentName:"p"},"packit")," creating the update.\nBy default, this option is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". When set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,i.kt)("em",{parentName:"p"},"README.packit")," is not created or updated.\n(A previously created ",(0,i.kt)("em",{parentName:"p"},"README.packit")," needs to be removed manually)."),(0,i.kt)("h4",{id:"upstream_ref"},"upstream_ref"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Git reference to last upstream git commit (for source-git repos).\nCan be set to commit hash, tag or a branch name. You can also use globbing pattern\nto find a tag. In case you want to use globbing pattern for a branch, prefix the\npattern with ",(0,i.kt)("inlineCode",{parentName:"p"},"branches/"),", e.g. for a branch matching ",(0,i.kt)("inlineCode",{parentName:"p"},"*-release")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"branches/*-release"),"."),(0,i.kt)("h4",{id:"downstream_package_name"},"downstream_package_name"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Name of the RPM package in Fedora, defaults to the name of the\nGitHub repository. In case of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"packages")," key, the defaults are the keys of the dictionary."),(0,i.kt)("h4",{id:"dist_git_namespace"},"dist_git_namespace"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Namespace in dist-git URL (defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"rpms"),")."),(0,i.kt)("h4",{id:"dist_git_base_url"},"dist_git_base_url"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") URL of dist-git server, defaults to ",(0,i.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/"},"https://src.fedoraproject.org/"),"\n(has to end with a slash)."),(0,i.kt)("h4",{id:"create_tarball_command-deprecated"},(0,i.kt)("del",{parentName:"h4"},"create_tarball_command")," (deprecated)"),(0,i.kt)("p",null,"Please use ",(0,i.kt)("a",{parentName:"p",href:"configuration/actions/"},(0,i.kt)("inlineCode",{parentName:"a"},"create-archive")," action")),(0,i.kt)("h4",{id:"current_version_command-deprecated"},(0,i.kt)("del",{parentName:"h4"},"current_version_command")," (deprecated)"),(0,i.kt)("p",null,"Please use ",(0,i.kt)("a",{parentName:"p",href:"configuration/actions/"},(0,i.kt)("inlineCode",{parentName:"a"},"get-current-version")," action")),(0,i.kt)("h4",{id:"actions"},"actions"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Custom actions/hooks overwriting the default behavior of packit\n(more in ",(0,i.kt)("a",{parentName:"p",href:"configuration/actions/"},"Actions"),")."),(0,i.kt)("h4",{id:"allowed_gpg_keys"},"allowed_gpg_keys"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of string"),") A list of gpg-key fingerprints; if specified, one of the\nconfigured keys have to sign the last commit when updating in downstream; add\nGitHub key (",(0,i.kt)("inlineCode",{parentName:"p"},"5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23"),") if you want to use\nthis on code merged via GitHub web interface."),(0,i.kt)("h4",{id:"spec_source_id"},"spec_source_id"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"int or string"),") Numeric ID of Source inside spec file which packit should\nchange when setting path to the newly generated tarball, can be also full name\nof the macro. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"Source0")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Source"),", whichever is found first in\nthe spec file."),(0,i.kt)("h4",{id:"upstream_tag_template"},"upstream_tag_template"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") Packit by default expects git tags to match versions (e.g. when\ndoing the ",(0,i.kt)("a",{parentName:"p",href:"/docs/cli/propose-downstream/"},(0,i.kt)("inlineCode",{parentName:"a"},"propose-downstream")," command"),") -\nif you are using a different tagging scheme, let's say ",(0,i.kt)("inlineCode",{parentName:"p"},"v1.2.3"),"\nyou can then set this parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"v{version}")," and\npackit will fill in the version argument."),(0,i.kt)("h4",{id:"archive_root_dir_template"},"archive_root_dir_template"),(0,i.kt)("p",null,"(string) In the ",(0,i.kt)("a",{parentName:"p",href:"configuration/actions/"},(0,i.kt)("inlineCode",{parentName:"a"},"fix-spec-file")," action")," Packit changes first ",(0,i.kt)("inlineCode",{parentName:"p"},"%setup")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"%autosetup"),") macro\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"%prep")," and adds ",(0,i.kt)("inlineCode",{parentName:"p"},"-n")," so the generated tarball can be unpacked. For this\npurpose, it requires the name of the directory in the source archive. For tar archives\nwith one directory, Packit gets it automatically. If Packit is not able to extract it\nfrom the archive with the tar python module, it is possible to specify it explicitly\nwith this option."),(0,i.kt)("p",null,"Default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"{upstream_pkg_name}-{version}"),"."),(0,i.kt)("p",null,"You can use following tags in string:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{upstream_pkg_name}")," - name of the upstream package"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{version}")," - package version")),(0,i.kt)("h4",{id:"patch_generation_ignore_paths"},"patch_generation_ignore_paths"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of strings"),") In a source-git repo, when packit is generating patches,\nit excludes changes to the spec file and packit.yaml by default: with this\noption you can precisely specify paths to exclude."),(0,i.kt)("h4",{id:"patch_generation_patch_id_digits"},"patch_generation_patch_id_digits"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"integer"),") The number of digits (minimum width) used for patch IDs when\nadding ",(0,i.kt)("inlineCode",{parentName:"p"},"PatchN")," tags to a spec-file while updating dist-git from a source-git\nrepository.  Defaults to 4, that is, patches will look like ",(0,i.kt)("inlineCode",{parentName:"p"},"PatchNNNN:\n<patch_name>"),', and leading zeros are added, if needed. A value of 0 means "no\nminimum width".'),(0,i.kt)("h4",{id:"notifications"},"notifications"),(0,i.kt)("p",null,'There is only one notification configuration you can set up right now: enable\nthe "Congratulations!" comment which will packit send after a successful build of a\npull request is done.'),(0,i.kt)("p",null,"The default behaviour is not to send the comment with instructions how to install a\npackage with the change implemented in the pull request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"notifications:\n  pull_request:\n    successful_build: false\n")),(0,i.kt)("p",null,"You can enable the commenting by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"successful_build")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"issue_repository"},"issue_repository"),(0,i.kt)("p",null,"Use this key to be notified about errors of the downstream jobs (Koji build, Bodhi update, pull from upstream).\nThe value can be a URL of any GitHub/GitLab/Pagure project including dist-git\nwhere issues are enabled and Packit has an identity on that git forger instance.\nAlternatively, you can set up a dedicated project for receiving such notifications.\n(Let us know if you need another instance to be supported.)\nIt does not need to be an upstream repository,\nyou can also enable an issue tracker for the dist-git repository\nand use this as a place for those notifications.\nOr, you can set up a dedicated project for receiving such notifications."),(0,i.kt)("p",null,"By default, no issue will be created so Packit doesn't unintentionally spam any repository.\n(E.g. Since those jobs are defined in downstream, upstream project does not need to be aware of Packit.)"),(0,i.kt)("p",null,"By enabling this setting, Packit will either create a new issue or add a comment to an already existing issue.\nIn that case, the issue will be reused and a new comment will be added."),(0,i.kt)("p",null,"When a downstream job (e.g. Koji build or Bodhi update) fails,\nyou can re-trigger the failed job by",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"/packit koji-build")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"/packit create-update")," comment in the opened issue by Packit.\nThe Packit app has to be installed in the issue repository and the\nuser, who commented, needs to have write permissions\ninto the repository in order for the retriggering to work."),(0,i.kt)("h4",{id:"copy_upstream_release_description"},"copy_upstream_release_description"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"bool"),") When doing a new update in Fedora dist-git, the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases"},"GitHub"),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/releases/"},"GitLab")," upstream release description is copied to the specfile changelog when set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". By default (",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"),\ncommit message titles (first line of a commit message) are copied.\nBut be aware that the release description is copied as is, without any processing\nand the result needs to fulfill the spec-file syntax.\nBe specially careful when using characters like ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," that can be interpreted as macros.\nAlso, use ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," for bullet points instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," so the line is not interpreted as a new changelog entry."),(0,i.kt)("p",null,"e.g."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"copy_upstream_release_description = True"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"%changelog\n* Thu Oct 15 2020 Packit Service <user-cont-team+packit-service@redhat.com> - 0.18.0-1\nPackit got new archive_root_dir_template config option to get custom archive root dir.\nYou can find more info in the documentation.\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"copy_upstream_release_description = False")," (default):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"%changelog\n* Thu Oct 15 2020 Packit Service <user-cont-team+packit-service@redhat.com> - 0.18.0-1\n- Use inner archive directory in %setup macro\n- Use archive_root_dir_template\n")),(0,i.kt)("h4",{id:"sources"},"sources"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of dicts"),") A list of sources to override the URLs of ",(0,i.kt)("inlineCode",{parentName:"p"},"SourceX")," entries in the spec-file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"sources:\n  - path: rsync-3.1.3.tar.gz\n    url: https://git.centos.org/sources/rsync/c8s/82e7829c0b3cefbd33c233005341e2073c425629\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"path")," is the path relative to the directory with sources where the source will be placed. If a ",(0,i.kt)("inlineCode",{parentName:"p"},"SourceX")," entry with\ncorresponding basename exists in the spec-file, the source will be downloaded from the ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," found in the configuration\ninstead of the location defined in the spec-file."),(0,i.kt)("h4",{id:"srpm_build_deps"},"srpm_build_deps"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of strings"),") A list of RPM dependencies that are needed for your actions to be run when building a SRPM.\nThe dependencies are installed into the Copr build environment each time the build is triggered."),(0,i.kt)("h4",{id:"packit_instances"},"packit_instances"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"list of strings"),") If you want to help us with catching issues or need some feature sooner than other users,\nyou can use our staging instance that has the freshest code we have.\nFor that, you can specify the instance(s) that will react to your jobs by using this configuration option.\nIt uses ",(0,i.kt)("inlineCode",{parentName:"p"},'["prod"]')," as the default, but you can set both (",(0,i.kt)("inlineCode",{parentName:"p"},'["prod", "stg"]'),") or just stage (",(0,i.kt)("inlineCode",{parentName:"p"},'["stg"]'),").\nYou can also have a different setup for each job -- see ",(0,i.kt)("a",{parentName:"p",href:"#overriding-global-parameters"},"how the overriding works"),"\nin the config file."),(0,i.kt)("p",null,"For the details on how to enable staging instance, please see ",(0,i.kt)("a",{parentName:"p",href:"/docs/guide/#staging-instance"},"the onboarding guide"),"."),(0,i.kt)("h4",{id:"upstream_tag_include"},"upstream_tag_include"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") This field requires a Python regex pattern. It's used with ",(0,i.kt)("inlineCode",{parentName:"p"},"re.match")," to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"include tags: When identifying the latest upstream tag, this pattern filters in specific tags."),(0,i.kt)("li",{parentName:"ul"},"in Packit Service: In ",(0,i.kt)("inlineCode",{parentName:"li"},"propose_downstream")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pull_from_upstream")," jobs, it determines whether a specific release\nshould trigger a reaction.")),(0,i.kt)("h4",{id:"upstream_tag_exclude"},"upstream_tag_exclude"),(0,i.kt)("p",null,"(",(0,i.kt)("em",{parentName:"p"},"string"),") This field requires a Python regex pattern. It's used with ",(0,i.kt)("inlineCode",{parentName:"p"},"re.match")," to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"exclude tags: When identifying the latest upstream tag, this pattern omits certain tags."),(0,i.kt)("li",{parentName:"ul"},"in Packit Service: In ",(0,i.kt)("inlineCode",{parentName:"li"},"propose_downstream")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pull_from_upstream")," jobs, it determines whether a specific release\nshould trigger a reaction.")),(0,i.kt)("h2",{id:"aliases"},"Aliases"),(0,i.kt)("p",null,"To not need to change the config file when the new system version is released,\nPackit provides multiple aliases to reference a subset of the active\nreleases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-all")," - all active releases, which includes released and branched\nversions and Rawhide (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-34"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-35"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-36"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-rawhide"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-stable")," \u2014 the current (two or three) released and supported\nversions (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-34"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-35"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-development")," \u2014 development versions of Fedora; the branched\nversion is used only when available (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-36"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-rawhide"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-latest")," \u2014 the last versioned Fedora (not a Rawhide), regardless if\nit's released or still under development."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-latest-stable")," \u2014 the latest released Fedora version (e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-35"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fedora-branched")," \u2014 all branched releases, that is: everything, except\nRawhide (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-34"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-35"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fedora-36"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epel-all")," - current active ",(0,i.kt)("a",{parentName:"li",href:"https://docs.fedoraproject.org/en-US/epel/"},"EPEL"),"\nversions (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"epel-7"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"epel-8"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"epel-9"),")")),(0,i.kt)("p",null,"The aliases above can be used both to specify targets when ",(0,i.kt)("a",{parentName:"p",href:"configuration/upstream/copr_build"},"building in\nCopr")," or ",(0,i.kt)("a",{parentName:"p",href:"configuration/upstream/tests"},"running tests"),",\nand to reference dist-git branches of different system versions\n(e.g. for ",(0,i.kt)("a",{parentName:"p",href:"configuration/upstream/propose_downstream"},(0,i.kt)("inlineCode",{parentName:"a"},"propose_downstream")," job"),"\nor downstream jobs like ",(0,i.kt)("a",{parentName:"p",href:"configuration/downstream/koji_build"},(0,i.kt)("inlineCode",{parentName:"a"},"koji_build")),"\nor ",(0,i.kt)("a",{parentName:"p",href:"configuration/downstream/bodhi_update"},(0,i.kt)("inlineCode",{parentName:"a"},"bodhi_update")),")."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can combine aliases with architecture where appropriate (e.g. in Copr targets).\nYou can do this by suffixing the alias with\nan architecture (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"fedora-stable-aarch64"),").\nBy default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"x86_64")," architecture is used.")),(0,i.kt)("p",null,"The information about releases is retrieved from Bodhi and because of the\ncache and required availability on Copr, it might take a while to get the\nnewest state."),(0,i.kt)("h2",{id:"user-configuration-file"},"User configuration file"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Since API tokens are a very sensitive information, please ",(0,i.kt)("strong",{parentName:"p"},"DO NOT")," ever store\nthem in a public (such as a GitHub repository). The configuration file here is\nlocated on your workstation, please ",(0,i.kt)("strong",{parentName:"p"},"DO NOT")," confuse it with a config file for\nyour project - that one is described above in the first section of this\ndocument.")),(0,i.kt)("p",null,"When running Packit as a tool locally, it is convenient to use a configuration\nfile to provide data such as API tokens. Packit respects ",(0,i.kt)("inlineCode",{parentName:"p"},"XDG_CONFIG_HOME"),"\nenvironment variable. If not set, it looks inside ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.config/")," directory."),(0,i.kt)("p",null,"The acceptable names are the same as for the package config:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".packit.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".packit.yml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"packit.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"packit.yml"))),(0,i.kt)("h3",{id:"values"},"Values"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"debug")),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},"enable debug logs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fas_user")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"username in Fedora account system; this is utilized when authenticating with Bodhi using Kerberos")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"kerberos_realm")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},'Kerberos realm to use for authentication, example "FEDORAPROJECT.ORG"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"authentication")),(0,i.kt)("td",{parentName:"tr",align:null},"dict"),(0,i.kt)("td",{parentName:"tr",align:null},"tokens for services (GitHub, Pagure)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"upstream_git_remote")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"name of the git remote to discover upstream project URL from")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"redhat_api_refresh_token")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"Red Hat API token, can be obtained ",(0,i.kt)("a",{parentName:"td",href:"https://access.redhat.com/management/api"},"here"))))),(0,i.kt)("h4",{id:"authentication-dictionary"},"Authentication dictionary"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"authentication")," is a dictionary where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"key is a hostname, url or name that can be mapped to a service-type, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"github.com")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"pagure")),(0,i.kt)("li",{parentName:"ul"},"value is a dictionary with keys: ",(0,i.kt)("inlineCode",{parentName:"li"},"token")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"instance_url")," (optional)")),(0,i.kt)("h5",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"authentication:\n    github.com:\n        token: mnbvcxz123456\n    pagure:\n        token: qwertyuiop098765\n        instance_url: https://src.fedoraproject.org\n")),(0,i.kt)("p",null,"The GitHub token is needed when packit interacts with GitHub API,\nget it at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"https://github.com/settings/tokens")," (getting full read & write repo scope should be enough).\nThe Pagure token needed to access REST API,\nget it at ",(0,i.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/settings#nav-api-tab"},"https://src.fedoraproject.org/settings#nav-api-tab")),(0,i.kt)("p",null,"Specifying tokens as direct keys ",(0,i.kt)("inlineCode",{parentName:"p"},"github_token")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pagure_user_token"),"\nhas been deprecated and will be removed in future versions."))}u.isMDXComponent=!0}}]);