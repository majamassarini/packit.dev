"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[4251],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(r),h=o,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||i;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},25558:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const i={title:"Monitoring"},a="Monitoring of Packit Service",p={unversionedId:"monitoring",id:"monitoring",title:"Monitoring",description:"Pushgateway",source:"@site/deployment/monitoring.md",sourceDirName:".",slug:"/monitoring",permalink:"/deployment/monitoring",draft:!1,editUrl:"https://github.com/packit/deployment/tree/main/docs/deployment/monitoring.md",tags:[],version:"current",frontMatter:{title:"Monitoring"},sidebar:"autogenerated",previous:{title:"Logs",permalink:"/deployment/logs"},next:{title:"Deploy Packit Service on Openshift Local Cluster",permalink:"/deployment/openshift_local_cluster"}},s={},c=[{value:"Pushgateway",id:"pushgateway",level:2},{value:"Flower",id:"flower",level:2}],l={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"monitoring-of-packit-service"},"Monitoring of Packit Service"),(0,o.kt)("h2",{id:"pushgateway"},"Pushgateway"),(0,o.kt)("p",null,"To record ",(0,o.kt)("em",{parentName:"p"},"Packit Service"),"-related metrics from Celery tasks we are going to use\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/prometheus/pushgateway"},"Prometheus Pushgateway")," which is\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/packit/deployment/blob/main/openshift/pushgateway.yml.j2"},"deployed")," in our cluster.\nIt can collect the metrics from the workers and provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint for Prometheus.\nThere is a Prometheus instance running in OpenShift PSI, which is going to\nscrape the ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint and then it will be possible\nto visualize them. Therefore the ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint needs to be publicly\naccessible - it is exposed on ",(0,o.kt)("a",{parentName:"p",href:"https://workers.packit.dev/metrics"},"https://workers.packit.dev/metrics")," for metrics\nof the production instance and ",(0,o.kt)("a",{parentName:"p",href:"https://workers.stg.packit.dev/metrics"},"https://workers.stg.packit.dev/metrics"),"\nfor metrics of the staging instance.\nWe use nginx (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/packit/deployment/blob/main/openshift/nginx.yml.j2"},"definition"),") to serve as a reverse\nproxy for the pushgateway, which enables us to allow only ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," requests and\nforward these to pushgateway (workers can send ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," requests internally)."),(0,o.kt)("h2",{id:"flower"},"Flower"),(0,o.kt)("p",null,"To record ",(0,o.kt)("em",{parentName:"p"},"celery")," related metrics from Celery tasks we are going to use\n",(0,o.kt)("a",{parentName:"p",href:"http://mher.github.io/flower/prometheus-integration.html#prometheus-integration"},"Flower Prometheus Integration"),"."))}u.isMDXComponent=!0}}]);