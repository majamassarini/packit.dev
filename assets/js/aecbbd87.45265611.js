"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[8084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const o={title:"in-mock",date:new Date("2022-07-25T00:00:00.000Z"),sidebar_position:25},a="packit build in-mock",c={unversionedId:"cli/build/mock",id:"cli/build/mock",title:"in-mock",description:"Create RPMs in mock using content of the upstream repository.",source:"@site/docs/cli/build/mock.md",sourceDirName:"cli/build",slug:"/cli/build/mock",permalink:"/docs/cli/build/mock",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/cli/build/mock.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{title:"in-mock",date:"2022-07-25T00:00:00.000Z",sidebar_position:25},sidebar:"autogenerated",previous:{title:"locally",permalink:"/docs/cli/build/local"},next:{title:"in-copr",permalink:"/docs/cli/build/copr"}},l={},s=[{value:"Help",id:"help",level:2}],p={toc:s},u="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"packit-build-in-mock"},(0,i.kt)("inlineCode",{parentName:"h1"},"packit build in-mock")),(0,i.kt)("p",null,"Create RPMs in mock using content of the upstream repository."),(0,i.kt)("h2",{id:"help"},"Help"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Usage: packit build in-mock [OPTIONS] [PATH_OR_URL]\n\n  Build RPMs in mock using content of the upstream repository.\n\n  PATH_OR_URL argument is a local path or a URL to the upstream git\n  repository, it defaults to the current working directory.\n\nOptions:\n  --upstream-ref TEXT       Git ref of the last upstream commit in the current\n                            branch from which packit should generate patches\n                            (this option implies the repository is source-\n                            git).\n  --release-suffix TEXT     Specifies release suffix. Allows to override\n                            default generated:{current_time}.{sanitized_curren\n                            t_branch}{git_desc_suffix}\n  --default-release-suffix  Allows to use default, packit-generated, release\n                            suffix when some release_suffix is specified in\n                            the configuration.\n  -r, --root TEXT           Uses specified chroot configuration. If ends with\n                            '.cfg', then it is treated as full path to the\n                            mock configuration.\n  -p, --package TEXT        Package to build, if more than one available, like\n                            in a monorepo configuration. Use it multiple times\n                            to select multiple packages.Defaults to all the\n                            packages listed inside the config.\n  -h, --help                Show this message and exit.\n")))}f.isMDXComponent=!0}}]);